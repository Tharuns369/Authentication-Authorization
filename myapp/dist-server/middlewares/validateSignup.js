"use strict";

var _joi = _interopRequireDefault(require("joi"));
var _userModel = _interopRequireDefault(require("../models/userModel"));
var _userDataServiceProvider = _interopRequireDefault(require("../services/userDataServiceProvider"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const signupSchema = _joi.default.object({
  name: _joi.default.string().min(5),
  email: _joi.default.string().email().required().email({
    minDomainSegments: 2,
    tlds: {
      allow: ['com', 'net']
    }
  }),
  password: _joi.default.string().min(8).required().pattern(new RegExp('^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*])(?=.*[a-zA-Z]).{8,}$'))
});
const siginSchema = _joi.default.object({
  email: _joi.default.string().email().required(),
  password: _joi.default.string().required()
});
const validateSignup = async (req, res, next) => {
  try {
    const {
      error,
      value
    } = await signupSchema.validate(req.body, {
      abortEarly: false
    });
    if (error) {
      console.log(error);
      console.log(req.body.password);
      return res.send(error.details);
    }
    const checkingUser = await _userModel.default.findOne({
      email: req.body.email
    });
    if (checkingUser) {
      res.status(401).send({
        success: "false",
        message: "user already exsists"
      });
    }
  } catch (err) {
    console.log(err);
    return res.status(500).json({
      success: false,
      message: err.message || "Something went wrong"
    });
  }
  next();
};
const validateSignin = async (req, res, next) => {
  try {
    const {
      error,
      value
    } = await signupSchema.validate(req.body, {
      abortEarly: false
    });
    if (error) {
      console.log(error);
      console.log(req.body.password);
      return res.send(error.details);
    }
  } catch (err) {
    console.log(err);
    return res.status(500).json({
      success: false,
      message: err.message || "Something went wrong"
    });
  }
  next();
};
module.exports = {
  validateSignup,
  validateSignin
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzaWdudXBTY2hlbWEiLCJKb2kiLCJvYmplY3QiLCJuYW1lIiwic3RyaW5nIiwibWluIiwiZW1haWwiLCJyZXF1aXJlZCIsIm1pbkRvbWFpblNlZ21lbnRzIiwidGxkcyIsImFsbG93IiwicGFzc3dvcmQiLCJwYXR0ZXJuIiwiUmVnRXhwIiwic2lnaW5TY2hlbWEiLCJ2YWxpZGF0ZVNpZ251cCIsInJlcSIsInJlcyIsIm5leHQiLCJlcnJvciIsInZhbHVlIiwidmFsaWRhdGUiLCJib2R5IiwiYWJvcnRFYXJseSIsImNvbnNvbGUiLCJsb2ciLCJzZW5kIiwiZGV0YWlscyIsImNoZWNraW5nVXNlciIsInVzZXJNb2RlbCIsImZpbmRPbmUiLCJzdGF0dXMiLCJzdWNjZXNzIiwibWVzc2FnZSIsImVyciIsImpzb24iLCJ2YWxpZGF0ZVNpZ25pbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi9zZXJ2ZXIvbWlkZGxld2FyZXMvdmFsaWRhdGVTaWdudXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpvaSBmcm9tICdqb2knXHJcbmltcG9ydCB1c2VyTW9kZWwgZnJvbSBcIi4uL21vZGVscy91c2VyTW9kZWxcIjtcclxuaW1wb3J0IHVzZXJEYXRhU2VydmljZVByb3ZpZGVyIGZyb20gXCIuLi9zZXJ2aWNlcy91c2VyRGF0YVNlcnZpY2VQcm92aWRlclwiO1xyXG5cclxuXHJcbmNvbnN0IHNpZ251cFNjaGVtYSA9IEpvaS5vYmplY3Qoe1xyXG4gIG5hbWU6IEpvaS5zdHJpbmcoKVxyXG4gICAgLm1pbig1KSxcclxuICBlbWFpbDogSm9pLnN0cmluZygpXHJcbiAgICAuZW1haWwoKVxyXG4gICAgLnJlcXVpcmVkKClcclxuICAgIC5lbWFpbCh7IG1pbkRvbWFpblNlZ21lbnRzOiAyLCB0bGRzOiB7IGFsbG93OiBbJ2NvbScsICduZXQnXSB9IH0pLFxyXG4gIHBhc3N3b3JkOiBKb2kuc3RyaW5nKClcclxuICAgIC5taW4oOClcclxuICAgIC5yZXF1aXJlZCgpXHJcbiAgICAucGF0dGVybihuZXcgUmVnRXhwKCdeKD89LipcXFxcZCkoPz0uKlthLXpdKSg/PS4qW0EtWl0pKD89LipbIUAjJCVeJipdKSg/PS4qW2EtekEtWl0pLns4LH0kJykpLFxyXG5cclxuXHJcbn0pO1xyXG5cclxuXHJcbmNvbnN0IHNpZ2luU2NoZW1hID0gSm9pLm9iamVjdCh7XHJcbiAgZW1haWw6IEpvaS5zdHJpbmcoKVxyXG4gICAgLmVtYWlsKClcclxuICAgIC5yZXF1aXJlZCgpLFxyXG4gIHBhc3N3b3JkOiBKb2kuc3RyaW5nKClcclxuICAgIC5yZXF1aXJlZCgpXHJcblxyXG5cclxufSk7XHJcblxyXG5cclxuY29uc3QgdmFsaWRhdGVTaWdudXAgPSBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICB0cnkge1xyXG5cclxuICAgIGNvbnN0IHsgZXJyb3IsIHZhbHVlIH0gPSBhd2FpdCBzaWdudXBTY2hlbWEudmFsaWRhdGUocmVxLmJvZHksXHJcbiAgICAgIHtcclxuICAgICAgICBhYm9ydEVhcmx5OiBmYWxzZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgY29uc29sZS5sb2cocmVxLmJvZHkucGFzc3dvcmQpXHJcbiAgICAgIHJldHVybiByZXMuc2VuZChlcnJvci5kZXRhaWxzKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjaGVja2luZ1VzZXIgPSBhd2FpdCB1c2VyTW9kZWwuZmluZE9uZSh7IGVtYWlsOiByZXEuYm9keS5lbWFpbCB9KVxyXG4gICAgaWYgKGNoZWNraW5nVXNlcikge1xyXG4gICAgICByZXMuc3RhdHVzKDQwMSkuc2VuZCh7XHJcbiAgICAgICAgc3VjY2VzczogXCJmYWxzZVwiLFxyXG4gICAgICAgIG1lc3NhZ2U6IFwidXNlciBhbHJlYWR5IGV4c2lzdHNcIlxyXG4gICAgICB9KVxyXG4gICAgfVxyXG5cclxuICB9XHJcbiAgY2F0Y2ggKGVycikge1xyXG4gICAgY29uc29sZS5sb2coZXJyKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDUwMCkuanNvbih7XHJcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxyXG4gICAgICBtZXNzYWdlOiBlcnIubWVzc2FnZSB8fCBcIlNvbWV0aGluZyB3ZW50IHdyb25nXCJcclxuICAgIH0pO1xyXG4gIH1cclxuICBuZXh0KClcclxufVxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuY29uc3QgdmFsaWRhdGVTaWduaW4gPSBhc3luYyAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICB0cnkge1xyXG5cclxuICAgIGNvbnN0IHsgZXJyb3IsIHZhbHVlIH0gPSBhd2FpdCBzaWdudXBTY2hlbWEudmFsaWRhdGUocmVxLmJvZHksXHJcbiAgICAgIHtcclxuICAgICAgICBhYm9ydEVhcmx5OiBmYWxzZSxcclxuICAgICAgfSk7XHJcblxyXG4gICAgaWYgKGVycm9yKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgY29uc29sZS5sb2cocmVxLmJvZHkucGFzc3dvcmQpXHJcbiAgICAgIHJldHVybiByZXMuc2VuZChlcnJvci5kZXRhaWxzKTtcclxuICAgIH1cclxuXHJcbiAgfVxyXG4gIGNhdGNoIChlcnIpIHtcclxuICAgIGNvbnNvbGUubG9nKGVycik7XHJcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg1MDApLmpzb24oe1xyXG4gICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UgfHwgXCJTb21ldGhpbmcgd2VudCB3cm9uZ1wiXHJcbiAgICB9KTtcclxuICB9XHJcbiAgbmV4dCgpXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID1cclxue1xyXG4gIHZhbGlkYXRlU2lnbnVwLFxyXG4gIHZhbGlkYXRlU2lnbmluXHJcbn1cclxuXHJcblxyXG5cclxuXHJcbiJdLCJtYXBwaW5ncyI6Ijs7QUFBQTtBQUNBO0FBQ0E7QUFBMEU7QUFH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