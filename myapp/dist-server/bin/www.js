#!/usr/bin/env node

/**
 * Module dependencies.
 */
"use strict";

require("./db");
require('dotenv').config();
var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    // named pipe
    return val;
  }
  if (port >= 0) {
    // port number
    return port;
  }
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZXF1aXJlIiwiY29uZmlnIiwiYXBwIiwiZGVidWciLCJodHRwIiwicG9ydCIsIm5vcm1hbGl6ZVBvcnQiLCJwcm9jZXNzIiwiZW52IiwiUE9SVCIsInNldCIsInNlcnZlciIsImNyZWF0ZVNlcnZlciIsImxpc3RlbiIsIm9uIiwib25FcnJvciIsIm9uTGlzdGVuaW5nIiwidmFsIiwicGFyc2VJbnQiLCJpc05hTiIsImVycm9yIiwic3lzY2FsbCIsImJpbmQiLCJjb2RlIiwiY29uc29sZSIsImV4aXQiLCJhZGRyIiwiYWRkcmVzcyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9iaW4vd3d3LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIiMhL3Vzci9iaW4vZW52IG5vZGVcblxuLyoqXG4gKiBNb2R1bGUgZGVwZW5kZW5jaWVzLlxuICovXG5cbnJlcXVpcmUoJ2RvdGVudicpLmNvbmZpZygpXG5cbnZhciBhcHAgPSByZXF1aXJlKCcuLi9hcHAnKTtcbmltcG9ydCAnLi9kYidcbnZhciBkZWJ1ZyA9IHJlcXVpcmUoJ2RlYnVnJykoJ215YXBwOnNlcnZlcicpO1xudmFyIGh0dHAgPSByZXF1aXJlKCdodHRwJyk7XG5cbi8qKlxuICogR2V0IHBvcnQgZnJvbSBlbnZpcm9ubWVudCBhbmQgc3RvcmUgaW4gRXhwcmVzcy5cbiAqL1xuXG52YXIgcG9ydCA9IG5vcm1hbGl6ZVBvcnQocHJvY2Vzcy5lbnYuUE9SVCB8fCAnMzAwMCcpO1xuYXBwLnNldCgncG9ydCcsIHBvcnQpO1xuXG4vKipcbiAqIENyZWF0ZSBIVFRQIHNlcnZlci5cbiAqL1xuXG52YXIgc2VydmVyID0gaHR0cC5jcmVhdGVTZXJ2ZXIoYXBwKTtcblxuLyoqXG4gKiBMaXN0ZW4gb24gcHJvdmlkZWQgcG9ydCwgb24gYWxsIG5ldHdvcmsgaW50ZXJmYWNlcy5cbiAqL1xuXG5zZXJ2ZXIubGlzdGVuKHBvcnQpO1xuc2VydmVyLm9uKCdlcnJvcicsIG9uRXJyb3IpO1xuc2VydmVyLm9uKCdsaXN0ZW5pbmcnLCBvbkxpc3RlbmluZyk7XG5cbi8qKlxuICogTm9ybWFsaXplIGEgcG9ydCBpbnRvIGEgbnVtYmVyLCBzdHJpbmcsIG9yIGZhbHNlLlxuICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBvcnQodmFsKSB7XG4gIHZhciBwb3J0ID0gcGFyc2VJbnQodmFsLCAxMCk7XG5cbiAgaWYgKGlzTmFOKHBvcnQpKSB7XG4gICAgLy8gbmFtZWQgcGlwZVxuICAgIHJldHVybiB2YWw7XG4gIH1cblxuICBpZiAocG9ydCA+PSAwKSB7XG4gICAgLy8gcG9ydCBudW1iZXJcbiAgICByZXR1cm4gcG9ydDtcbiAgfVxuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBFdmVudCBsaXN0ZW5lciBmb3IgSFRUUCBzZXJ2ZXIgXCJlcnJvclwiIGV2ZW50LlxuICovXG5cbmZ1bmN0aW9uIG9uRXJyb3IoZXJyb3IpIHtcbiAgaWYgKGVycm9yLnN5c2NhbGwgIT09ICdsaXN0ZW4nKSB7XG4gICAgdGhyb3cgZXJyb3I7XG4gIH1cblxuICB2YXIgYmluZCA9IHR5cGVvZiBwb3J0ID09PSAnc3RyaW5nJ1xuICAgID8gJ1BpcGUgJyArIHBvcnRcbiAgICA6ICdQb3J0ICcgKyBwb3J0O1xuXG4gIC8vIGhhbmRsZSBzcGVjaWZpYyBsaXN0ZW4gZXJyb3JzIHdpdGggZnJpZW5kbHkgbWVzc2FnZXNcbiAgc3dpdGNoIChlcnJvci5jb2RlKSB7XG4gICAgY2FzZSAnRUFDQ0VTJzpcbiAgICAgIGNvbnNvbGUuZXJyb3IoYmluZCArICcgcmVxdWlyZXMgZWxldmF0ZWQgcHJpdmlsZWdlcycpO1xuICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnRUFERFJJTlVTRSc6XG4gICAgICBjb25zb2xlLmVycm9yKGJpbmQgKyAnIGlzIGFscmVhZHkgaW4gdXNlJyk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgZXJyb3I7XG4gIH1cbn1cblxuLyoqXG4gKiBFdmVudCBsaXN0ZW5lciBmb3IgSFRUUCBzZXJ2ZXIgXCJsaXN0ZW5pbmdcIiBldmVudC5cbiAqL1xuXG5mdW5jdGlvbiBvbkxpc3RlbmluZygpIHtcbiAgdmFyIGFkZHIgPSBzZXJ2ZXIuYWRkcmVzcygpO1xuICB2YXIgYmluZCA9IHR5cGVvZiBhZGRyID09PSAnc3RyaW5nJ1xuICAgID8gJ3BpcGUgJyArIGFkZHJcbiAgICA6ICdwb3J0ICcgKyBhZGRyLnBvcnQ7XG4gIGRlYnVnKCdMaXN0ZW5pbmcgb24gJyArIGJpbmQpO1xufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFGQTs7QUFPQTtBQUhBQSxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUNDLE1BQU0sRUFBRTtBQUUxQixJQUFJQyxHQUFHLEdBQUdGLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFFM0IsSUFBSUcsS0FBSyxHQUFHSCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsY0FBYyxDQUFDO0FBQzVDLElBQUlJLElBQUksR0FBR0osT0FBTyxDQUFDLE1BQU0sQ0FBQzs7QUFFMUI7QUFDQTtBQUNBOztBQUVBLElBQUlLLElBQUksR0FBR0MsYUFBYSxDQUFDQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsSUFBSSxJQUFJLE1BQU0sQ0FBQztBQUNwRFAsR0FBRyxDQUFDUSxHQUFHLENBQUMsTUFBTSxFQUFFTCxJQUFJLENBQUM7O0FBRXJCO0FBQ0E7QUFDQTs7QUFFQSxJQUFJTSxNQUFNLEdBQUdQLElBQUksQ0FBQ1EsWUFBWSxDQUFDVixHQUFHLENBQUM7O0FBRW5DO0FBQ0E7QUFDQTs7QUFFQVMsTUFBTSxDQUFDRSxNQUFNLENBQUNSLElBQUksQ0FBQztBQUNuQk0sTUFBTSxDQUFDRyxFQUFFLENBQUMsT0FBTyxFQUFFQyxPQUFPLENBQUM7QUFDM0JKLE1BQU0sQ0FBQ0csRUFBRSxDQUFDLFdBQVcsRUFBRUUsV0FBVyxDQUFDOztBQUVuQztBQUNBO0FBQ0E7O0FBRUEsU0FBU1YsYUFBYSxDQUFDVyxHQUFHLEVBQUU7RUFDMUIsSUFBSVosSUFBSSxHQUFHYSxRQUFRLENBQUNELEdBQUcsRUFBRSxFQUFFLENBQUM7RUFFNUIsSUFBSUUsS0FBSyxDQUFDZCxJQUFJLENBQUMsRUFBRTtJQUNmO0lBQ0EsT0FBT1ksR0FBRztFQUNaO0VBRUEsSUFBSVosSUFBSSxJQUFJLENBQUMsRUFBRTtJQUNiO0lBQ0EsT0FBT0EsSUFBSTtFQUNiO0VBRUEsT0FBTyxLQUFLO0FBQ2Q7O0FBRUE7QUFDQTtBQUNBOztBQUVBLFNBQVNVLE9BQU8sQ0FBQ0ssS0FBSyxFQUFFO0VBQ3RCLElBQUlBLEtBQUssQ0FBQ0MsT0FBTyxLQUFLLFFBQVEsRUFBRTtJQUM5QixNQUFNRCxLQUFLO0VBQ2I7RUFFQSxJQUFJRSxJQUFJLEdBQUcsT0FBT2pCLElBQUksS0FBSyxRQUFRLEdBQy9CLE9BQU8sR0FBR0EsSUFBSSxHQUNkLE9BQU8sR0FBR0EsSUFBSTs7RUFFbEI7RUFDQSxRQUFRZSxLQUFLLENBQUNHLElBQUk7SUFDaEIsS0FBSyxRQUFRO01BQ1hDLE9BQU8sQ0FBQ0osS0FBSyxDQUFDRSxJQUFJLEdBQUcsK0JBQStCLENBQUM7TUFDckRmLE9BQU8sQ0FBQ2tCLElBQUksQ0FBQyxDQUFDLENBQUM7TUFDZjtJQUNGLEtBQUssWUFBWTtNQUNmRCxPQUFPLENBQUNKLEtBQUssQ0FBQ0UsSUFBSSxHQUFHLG9CQUFvQixDQUFDO01BQzFDZixPQUFPLENBQUNrQixJQUFJLENBQUMsQ0FBQyxDQUFDO01BQ2Y7SUFDRjtNQUNFLE1BQU1MLEtBQUs7RUFBQztBQUVsQjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0osV0FBVyxHQUFHO0VBQ3JCLElBQUlVLElBQUksR0FBR2YsTUFBTSxDQUFDZ0IsT0FBTyxFQUFFO0VBQzNCLElBQUlMLElBQUksR0FBRyxPQUFPSSxJQUFJLEtBQUssUUFBUSxHQUMvQixPQUFPLEdBQUdBLElBQUksR0FDZCxPQUFPLEdBQUdBLElBQUksQ0FBQ3JCLElBQUk7RUFDdkJGLEtBQUssQ0FBQyxlQUFlLEdBQUdtQixJQUFJLENBQUM7QUFDL0IifQ==