"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.UserDataServiceProvider = void 0;
var _userModel = _interopRequireDefault(require("../models/userModel"));
var _crypto = _interopRequireDefault(require("crypto"));
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _morgan = require("morgan");
var _bcrypt = _interopRequireDefault(require("bcrypt"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
class UserDataServiceProvider {
  async createUser(userObject) {
    const newUser = new _userModel.default(userObject);
    const saltRounds = 10;
    // newUser.setPassword(userObject.password)
    const hasedpassword = await _bcrypt.default.hash(userObject.password, saltRounds);
    newUser.password = hasedpassword;
    newUser.Email_Verified = false;
    await newUser.save();
    return newUser;
  }
  async signIn(signInObject) {
    const user = await _userModel.default.findOne({
      email: signInObject.email
    });
    if (user) {
      const client = await _bcrypt.default.compare(signInObject.password, user.password);
      if (client) {
        return user;
      } else {
        return false;
      }
    }
    return false;
  }
  async CheckingUser(email) {
    const user = await _userModel.default.findOne({
      email: email
    });
    if (user) {
      return user;
    } else {
      return false;
    }
  }
  async CheckingUserWithId(id) {
    const user = await _userModel.default.findOne({
      _id: id
    });
    if (user) {
      return user;
    } else {
      return false;
    }
  }
}
exports.UserDataServiceProvider = UserDataServiceProvider;
var _default = new UserDataServiceProvider();
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVc2VyRGF0YVNlcnZpY2VQcm92aWRlciIsImNyZWF0ZVVzZXIiLCJ1c2VyT2JqZWN0IiwibmV3VXNlciIsInVzZXJNb2RlbCIsInNhbHRSb3VuZHMiLCJoYXNlZHBhc3N3b3JkIiwiYmNyeXB0IiwiaGFzaCIsInBhc3N3b3JkIiwiRW1haWxfVmVyaWZpZWQiLCJzYXZlIiwic2lnbkluIiwic2lnbkluT2JqZWN0IiwidXNlciIsImZpbmRPbmUiLCJlbWFpbCIsImNsaWVudCIsImNvbXBhcmUiLCJDaGVja2luZ1VzZXIiLCJDaGVja2luZ1VzZXJXaXRoSWQiLCJpZCIsIl9pZCJdLCJzb3VyY2VzIjpbIi4uLy4uL3NlcnZlci9zZXJ2aWNlcy91c2VyRGF0YVNlcnZpY2VQcm92aWRlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdXNlck1vZGVsIGZyb20gXCIuLi9tb2RlbHMvdXNlck1vZGVsXCJcclxuaW1wb3J0IGNyeXB0byBmcm9tICdjcnlwdG8nXHJcbmltcG9ydCBqd3QgZnJvbSAnanNvbndlYnRva2VuJ1xyXG5cclxuaW1wb3J0IHsgdG9rZW4gfSBmcm9tIFwibW9yZ2FuXCJcclxuaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHQnXHJcbmV4cG9ydCBjbGFzcyBVc2VyRGF0YVNlcnZpY2VQcm92aWRlciB7XHJcbiAgICBhc3luYyBjcmVhdGVVc2VyKHVzZXJPYmplY3QpIHtcclxuICAgICAgICBjb25zdCBuZXdVc2VyID0gbmV3IHVzZXJNb2RlbCh1c2VyT2JqZWN0KVxyXG4gICAgICAgIGNvbnN0IHNhbHRSb3VuZHMgPSAxMFxyXG4gICAgICAgIC8vIG5ld1VzZXIuc2V0UGFzc3dvcmQodXNlck9iamVjdC5wYXNzd29yZClcclxuICAgICAgICBjb25zdCBoYXNlZHBhc3N3b3JkID0gYXdhaXQgYmNyeXB0Lmhhc2godXNlck9iamVjdC5wYXNzd29yZCwgc2FsdFJvdW5kcylcclxuICAgICAgICBuZXdVc2VyLnBhc3N3b3JkID0gaGFzZWRwYXNzd29yZFxyXG4gICAgICAgIG5ld1VzZXIuRW1haWxfVmVyaWZpZWQ9ZmFsc2VcclxuXHJcbiAgICAgICAgYXdhaXQgbmV3VXNlci5zYXZlKClcclxuICAgICAgICByZXR1cm4gbmV3VXNlclxyXG4gICAgfVxyXG4gICAgYXN5bmMgc2lnbkluKHNpZ25Jbk9iamVjdCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB1c2VyTW9kZWwuZmluZE9uZSh7IGVtYWlsOiBzaWduSW5PYmplY3QuZW1haWwgfSk7XHJcbiAgICAgICAgaWYgKHVzZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgY2xpZW50ID0gYXdhaXQgYmNyeXB0LmNvbXBhcmUoc2lnbkluT2JqZWN0LnBhc3N3b3JkLCB1c2VyLnBhc3N3b3JkKVxyXG5cclxuICAgICAgICAgICAgaWYgKGNsaWVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gIFxyXG4gICAgYXN5bmMgQ2hlY2tpbmdVc2VyKGVtYWlsKSB7XHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHVzZXJNb2RlbC5maW5kT25lKHsgZW1haWw6ZW1haWx9KTtcclxuICAgICAgICBpZiAodXNlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdXNlcjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGFzeW5jIENoZWNraW5nVXNlcldpdGhJZChpZCkge1xyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCB1c2VyTW9kZWwuZmluZE9uZSh7IF9pZDppZCB9KVxyXG4gICAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB1c2VyXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgXHJcblxyXG59XHJcblxyXG5cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBuZXcgVXNlckRhdGFTZXJ2aWNlUHJvdmlkZXIoKTsiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFBMkI7QUFDcEIsTUFBTUEsdUJBQXVCLENBQUM7RUFDakMsTUFBTUMsVUFBVSxDQUFDQyxVQUFVLEVBQUU7SUFDekIsTUFBTUMsT0FBTyxHQUFHLElBQUlDLGtCQUFTLENBQUNGLFVBQVUsQ0FBQztJQUN6QyxNQUFNRyxVQUFVLEdBQUcsRUFBRTtJQUNyQjtJQUNBLE1BQU1DLGFBQWEsR0FBRyxNQUFNQyxlQUFNLENBQUNDLElBQUksQ0FBQ04sVUFBVSxDQUFDTyxRQUFRLEVBQUVKLFVBQVUsQ0FBQztJQUN4RUYsT0FBTyxDQUFDTSxRQUFRLEdBQUdILGFBQWE7SUFDaENILE9BQU8sQ0FBQ08sY0FBYyxHQUFDLEtBQUs7SUFFNUIsTUFBTVAsT0FBTyxDQUFDUSxJQUFJLEVBQUU7SUFDcEIsT0FBT1IsT0FBTztFQUNsQjtFQUNBLE1BQU1TLE1BQU0sQ0FBQ0MsWUFBWSxFQUFFO0lBQ3ZCLE1BQU1DLElBQUksR0FBRyxNQUFNVixrQkFBUyxDQUFDVyxPQUFPLENBQUM7TUFBRUMsS0FBSyxFQUFFSCxZQUFZLENBQUNHO0lBQU0sQ0FBQyxDQUFDO0lBQ25FLElBQUlGLElBQUksRUFBRTtNQUNOLE1BQU1HLE1BQU0sR0FBRyxNQUFNVixlQUFNLENBQUNXLE9BQU8sQ0FBQ0wsWUFBWSxDQUFDSixRQUFRLEVBQUVLLElBQUksQ0FBQ0wsUUFBUSxDQUFDO01BRXpFLElBQUlRLE1BQU0sRUFBRTtRQUNSLE9BQU9ILElBQUk7TUFDZixDQUFDLE1BQ0k7UUFDRCxPQUFPLEtBQUs7TUFDaEI7SUFDSjtJQUNBLE9BQU8sS0FBSztFQUNoQjtFQUVBLE1BQU1LLFlBQVksQ0FBQ0gsS0FBSyxFQUFFO0lBQ3RCLE1BQU1GLElBQUksR0FBRyxNQUFNVixrQkFBUyxDQUFDVyxPQUFPLENBQUM7TUFBRUMsS0FBSyxFQUFDQTtJQUFLLENBQUMsQ0FBQztJQUNwRCxJQUFJRixJQUFJLEVBQUU7TUFDTixPQUFPQSxJQUFJO0lBQ2YsQ0FBQyxNQUFNO01BQ0gsT0FBTyxLQUFLO0lBQ2hCO0VBQ0o7RUFFQSxNQUFNTSxrQkFBa0IsQ0FBQ0MsRUFBRSxFQUFFO0lBQ3pCLE1BQU1QLElBQUksR0FBRyxNQUFNVixrQkFBUyxDQUFDVyxPQUFPLENBQUM7TUFBRU8sR0FBRyxFQUFDRDtJQUFHLENBQUMsQ0FBQztJQUNoRCxJQUFJUCxJQUFJLEVBQUU7TUFDTixPQUFPQSxJQUFJO0lBQ2YsQ0FBQyxNQUNJO01BQ0QsT0FBTyxLQUFLO0lBQ2hCO0VBQ0o7QUFHSjtBQUFDO0FBQUEsZUFLYyxJQUFJZCx1QkFBdUIsRUFBRTtBQUFBIn0=